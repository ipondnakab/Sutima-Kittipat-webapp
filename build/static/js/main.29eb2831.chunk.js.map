{"version":3,"sources":["components/PostComponent/man.svg","components/PostComponent/bg2.jpg","logo.svg","components/Navbar/index.js","components/PostComponent/index.js","screens/PublicPage.js","components/ButonStyle/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","menu","undefined","className","style","justifyContent","display","PostCoponent","profile","post","src","img","iconProfile","alt","name","follower","postImage","detail","PublicPage","paddingBottom","flexDirection","alignItems","map","val","key","marginTop","PostComponent","ButtonS1","text","App","showMenu","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,uECA3CD,EAAOC,QAAU,IAA0B,kC,kKCsB5BC,MAnBf,YAA2B,IAATC,EAAQ,EAARA,KAEhB,OADAA,OAAgBC,IAATD,GAA4BA,EAEjC,yBAAKE,UAAU,WACb,yBACEA,UAAU,MACVC,MAAO,CAAEC,eAAgBJ,EAAO,gBAAkB,UAElD,yBAAKE,UAAU,YACb,qCAEF,yBAAKA,UAAU,YAAYC,MAAO,CAAEE,QAASL,EAAO,OAAS,SAC1DA,GAAc,S,wCCwBVM,MAlCf,YAA0C,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAC/B,OACE,6BAASN,UAAU,kBACjB,gCACE,yBAAKO,IAAKF,EAAUA,EAAQG,IAAMC,IAAaC,IAAI,YACnD,6BACE,4BAAKL,EAAUA,EAAQM,KAAO,YAC9B,2BAAIN,EAAUA,EAAQO,SAAW,SAGrC,8BAEE,yBACEL,IAAKD,EAAOA,EAAKE,IAAMK,IACvBH,IAAI,eAEN,2BACGJ,EACGA,EAAKQ,OACL,sOAGR,gCACE,yBAAKd,UAAU,oBACb,oCACA,sCACA,oCAEF,yBAAKA,UAAU,yBCoCRe,MAlEf,WAuCE,OACE,yBACEd,MAAO,CACLe,cAAe,GACfb,QAAS,OACTc,cAAe,SACfC,WAAY,WA5CR,CACR,CACEb,QAAS,CACPG,IAAK,iEACLG,KAAM,WACNC,SAAU,SAEZN,KAAM,CACJE,IAAK,4MACLM,OACE,gOAGN,CACET,QAAS,CACPG,IAAK,iEACLG,KAAM,SACNC,SAAU,SAEZN,KAAM,CACJE,IAAK,2EACLM,OACE,uNAGN,CACET,QAAS,CACPG,IAAK,iEACLG,KAAM,WACNC,SAAU,SAEZN,KAAM,CACJE,IAAK,qJACLM,OACE,2MAaCK,KAAI,SAACC,EAAKC,GACb,OACE,yBACEpB,MAAO,CACLqB,UAAW,GACXnB,QAAS,OACTc,cAAe,SACfC,WAAY,WAGd,kBAACK,EAAD,CAAejB,KAAMc,EAAId,KAAMD,QAASe,EAAIf,QAASgB,IAAKA,U,MC1D/D,SAASG,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,KAAMxB,EAAS,EAATA,MAC/B,OACE,yBAAKD,UAAU,OAAOC,MAAOA,GAC3B,+BAAKwB,I,MCoCIC,MA/Bf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CACE2B,UAAU,EACV7B,KACE,yBAAKG,MAAO,CAAEE,QAAS,OAAQc,cAAe,QAC5C,kBAACO,EAAD,CAAUC,KAAK,aACf,kBAACD,EAAD,CAAUC,KAAK,QAAQxB,MAAS,CAAC2B,WAAY,SAInD,kBAAC,EAAD,QCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.29eb2831.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.ef68baee.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg2.2f46140e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./navbar.css\";\n\nfunction Navbar({ menu }) {\n  menu = menu === undefined ? true : menu;\n  return (\n    <nav className=\"nav-bar\">\n      <div\n        className=\"nav\"\n        style={{ justifyContent: menu ? \"space-between\" : \"start\" }}\n      >\n        <div className=\"left-nav\">\n          <h1>Logo</h1>\n        </div>\n        <div className=\"right-nav\" style={{ display: menu ? \"flex\" : \"none\" }}>\n          {menu ? menu : null}\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./post-component.css\";\nimport iconProfile from \"./man.svg\";\nimport postImage from \"./bg2.jpg\";\n\nfunction PostCoponent({ profile, post }) {\n  return (\n    <article className=\"post-component\">\n      <header>\n        <img src={profile ? profile.img : iconProfile} alt=\"profile\"/>\n        <div>\n          <h2>{profile ? profile.name : \"nameUser\"}</h2>\n          <p>{profile ? profile.follower : \"NoF\"}</p>\n        </div>\n      </header>\n      <main>\n        {/* <img src={post ? post.image : postImage} /> */}\n        <img\n          src={post ? post.img : postImage}\n          alt=\"post image\"\n        />\n        <p>\n          {post\n            ? post.detail\n            : \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"}\n        </p>\n      </main>\n      <footer>\n        <div className=\"post-footer-left\">\n          <p>like </p>\n          <p>comment</p>\n          <p>Chat</p>\n        </div>\n        <div className=\"post-footer-right\"></div>\n      </footer>\n    </article>\n  );\n}\n\nexport default PostCoponent;\n","import React from \"react\";\nimport PostComponent from \"../components/PostComponent\";\n\nfunction PublicPage() {\n  let tem = [\n    {\n      profile: {\n        img: \"https://www.flaticon.com/svg/static/icons/svg/3135/3135715.svg\",\n        name: \"Kittipat\",\n        follower: \"12.1K\",\n      },\n      post: {\n        img: \"https://www.treehugger.com/thmb/bM_zeJcC8UpFkNa39UK69dfoT2w=/735x0/__opt__aboutcom__coeus__resources__content_migration__mnn__images__2017__01__cow-in-pasture-crop2-3b8cdbd62aee45f6ab8d49228fa85272.jpg\",\n        detail:\n          \"Ipsum is simply dummy text of the printing and typesetting industry. Industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\n      },\n    },\n    {\n      profile: {\n        img: \"https://www.flaticon.com/svg/static/icons/svg/3135/3135789.svg\",\n        name: \"Sutima\",\n        follower: \"20.4K\",\n      },\n      post: {\n        img: \"https://cdn.britannica.com/55/174255-050-526314B6/brown-Guernsey-cow.jpg\",\n        detail:\n          \"simply dummy text of the printing and typesetting industry. Industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\n      },\n    },\n    {\n      profile: {\n        img: \"https://www.flaticon.com/svg/static/icons/svg/3011/3011292.svg\",\n        name: \"Chakriya\",\n        follower: \"5.12M\",\n      },\n      post: {\n        img: \"https://dkpo4ygqb6rh6.cloudfront.net/COWSIGNALS_COM/imageresized/4023/8248646f7e35630b2bb4bf597c22b73a/2560_1440_75_fixedjpg/cowsignals_2560px.jpg\",\n        detail:\n          \"text of the printing and typesetting industry. Industry’s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\n      },\n    },\n  ];\n  return (\n    <div\n      style={{\n        paddingBottom: 70,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      {tem.map((val, key) => {\n        return (\n          <div\n            style={{\n              marginTop: 32,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n            }}\n          >\n            <PostComponent post={val.post} profile={val.profile} key={key} />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PublicPage;\n","import React from \"react\";\nimport \"./button.css\";\n\nexport function ButtonS1({ text, style }) {\n  return (\n    <div className=\"bts1\" style={style}>\n      <p> {text}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n//components\nimport Navbar from \"./components/Navbar\";\nimport PostComponent from \"./components/PostComponent\";\nimport PublicPage from \"./screens/PublicPage\";\nimport { ButtonS1 } from \"./components/ButonStyle\";\n\n//style\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar\n        showMenu={false}\n        menu={\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <ButtonS1 text=\"Register\" />\n            <ButtonS1 text=\"Login\" style = {{marginLeft: 10}}/>\n          </div>\n        }\n      />\n      <PublicPage />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}